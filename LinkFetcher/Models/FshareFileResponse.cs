// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LinkFetcher;
//
//    var fShareFileResponse = FShareFileResponse.FromJson(jsonString);

namespace LinkFetcher.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class FShareFileResponse
    {
        [JsonProperty("items")]
        public List<object> Items { get; set; }

        [JsonProperty("images")]
        public List<object> Images { get; set; }

        [JsonProperty("_links")]
        public Links Links { get; set; }

        [JsonProperty("current")]
        public FShareFileInfo CurrentFileInfo { get; set; }
    }

    public partial class FShareFileInfo
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("linkcode")]
        public string Linkcode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("secure")]
        public long Secure { get; set; }

        [JsonProperty("public")]
        public long Public { get; set; }

        [JsonProperty("copied")]
        public long Copied { get; set; }

        [JsonProperty("shared")]
        public long Shared { get; set; }

        [JsonProperty("directlink")]
        public long Directlink { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("hash_index")]
        public string HashIndex { get; set; }

        [JsonProperty("owner_id")]
        public long OwnerId { get; set; }

        [JsonProperty("pid")]
        public long Pid { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("mimetype")]
        public string Mimetype { get; set; }

        [JsonProperty("downloadcount")]
        public long Downloadcount { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("created")]
        public long Created { get; set; }

        [JsonProperty("lastdownload")]
        public long Lastdownload { get; set; }

        [JsonProperty("pwd")]
        public long Pwd { get; set; }

        [JsonProperty("modified")]
        public long Modified { get; set; }

        [JsonProperty("follow")]
        public long Follow { get; set; }

        [JsonProperty("canFollow")]
        public long CanFollow { get; set; }
    }

    public partial class Links
    {
        [JsonProperty("self")]
        public string Self { get; set; }

        [JsonProperty("next")]
        public string Next { get; set; }

    }

    public partial class FShareFileResponse
    {
        public static FShareFileResponse FromJson(string json) => JsonConvert.DeserializeObject<FShareFileResponse>(json, LinkFetcher.Models.FShareFileResponseConverter.Settings);
    }

    public static class FShareFileResponseSerialize
    {
        public static string ToJson(this FShareFileResponse self) => JsonConvert.SerializeObject(self, LinkFetcher.Models.FShareFileResponseConverter.Settings);
    }

    internal static class FShareFileResponseConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
