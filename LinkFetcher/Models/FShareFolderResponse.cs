// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ConceptDownloader.Models;
//
//    var fShareFolderResponse = FShareFolderResponse.FromJson(jsonString);

namespace LinkFetcher.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class FShareFolderResponse
    {
        [JsonProperty("items")]
        public List<FShareFile> Items { get; set; }

        [JsonProperty("images")]
        public object[] Images { get; set; }

        [JsonProperty("_links")]
        public Links Links { get; set; }

        [JsonProperty("current")]
        public FShareFile Current { get; set; }

    }

    public partial class FShareFile
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("linkcode")]
        public string LinkCode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("secure")]
        public long Secure { get; set; }

        [JsonProperty("public")]
        public long Public { get; set; }

        [JsonProperty("copied")]
        public long Copied { get; set; }

        [JsonProperty("shared")]
        public long Shared { get; set; }

        [JsonProperty("directlink")]
        public long Directlink { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("hash_index")]
        public string HashIndex { get; set; }

        [JsonProperty("owner_id")]
        public long OwnerId { get; set; }

        [JsonProperty("pid")]
        public long? Pid { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("mimetype")]
        public string Mimetype { get; set; }

        [JsonProperty("downloadcount")]
        public long Downloadcount { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("created")]
        public long Created { get; set; }

        [JsonProperty("lastdownload")]
        public long Lastdownload { get; set; }

        [JsonProperty("pwd")]
        public long Pwd { get; set; }

        [JsonProperty("modified")]
        public long Modified { get; set; }

        [JsonProperty("follow")]
        public long Follow { get; set; }

        [JsonProperty("canFollow")]
        public long CanFollow { get; set; }
        public string Url => "https://www.fshare.vn/file/" + this.LinkCode;
    }


    public partial class FShareFolderResponse
    {
        public static FShareFolderResponse FromJson(string json) => JsonConvert.DeserializeObject<FShareFolderResponse>(json, LinkFetcher.Models.FShareFolderResponseConverter.Settings);
    }

    public static class FShareFolderResponseSerialize
    {
        public static string ToJson(this FShareFolderResponse self) => JsonConvert.SerializeObject(self, LinkFetcher.Models.FShareFolderResponseConverter.Settings);
    }
    internal static class FShareFolderResponseConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new ParseStringConverter(),
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
